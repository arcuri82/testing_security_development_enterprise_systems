# A Travis is a service that provides Continuous Integration (CI) freely for
# Open-Source projects.
# It can be integrated with GitHub, by making a build each time new code is pushed.
# This is also done with PRs (Pull Requests), which can be rejected if failing the builds.
#
# Note: besides Travis, another option is CircleCI.

# Specify we are working with a Java project.
# Travis can be used also for many other languages.
language: java

# Details of the machine types on Travis to run the CI on
dist: xenial
os: linux

# The JDK we need for compiling
jdk:
  - openjdk11

# In some examples, we will use NodeJS as runtime to run JavaScript code
node_js:
  - node


# "sudo" is a Linux/Bash command to execute other commands in super-user (ie "root")
# mode. This is needed in Travis when using Docker
sudo: true

# Specify we need Docker for our build
services:
  - docker


# As the build will download JAR files from Maven Central, optimize their storage,
# so they do not get re-downloaded each time
cache:
  directories:
  - .autoconf
  - $HOME/.m2

# Useful when working in team. If someone breaks the build (code does not compile
# or some tests are failing), then get notified by email immediately.
notifications:
  email: true


# The actual commands we do for compiling.
#
# Note: Travis has a quite limited handling of build log files, so need
# to minimize them, ie do not be too verbose
#
# Note: the reasons for building "intro" and "advanced" separately are:
# 1) Travis has a restrictive time-limit for each command. Trying to build all
#    together in one go can fail due to a timeout
# 2) the 2 courses are taught in different semesters, so fixing breaking changes
#    have different priorities based on the time of the year

# By default, Travis does a "mvn install" during its onw 'install' phase.
# This is annoying, and unnecessarily time consuming when using multiple run-scripts.
# So, we override this behavior.
# We just force the downloading of dependencies here to reduce the clutter in the logs.
install: mvn dependency:resolve

jobs:
  include:
    - stage: Root
      # option -N is used to skip the sub-modules.
      # We still need to install the root pom.xml, otherwise the sub-modules
      # will fail when we try to build them (as they have a child-parent relation
      # to it)
      script: mvn clean install -N
    - stage: Misc
        - cd misc
        - mvn clean install --fae
    - stage: Intro
      script:
        - cd intro
        # --fae is "fail at the end", ie do not stop build at the first error
        - mvn clean install --fae
    - stage: Advanced
      script:
        - cd advanced
        - mvn clean install --fae


# Note: in Continuous Delivery, we could do a "mvn deploy" here to automatically
# deploy the artifacts if build is successful.
# So that you can do deployment by just doing a Git Push.
# However, in such case, best to have a special Git Branch for it, and
# not the master one.
#
# Note: the status of Travis build can also be put on the README.md as an
# image linked from Travis