package org.tsdes.advanced.rest

import  org.junit.jupiter.api.AfterAll
import  org.junit.jupiter.api.BeforeAll
import  org.junit.jupiter.api.BeforeEach
import  org.junit.jupiter.api.Test
import  org.junit.jupiter.api.Assertions.*
import  io.restassured.RestAssured
import  io.restassured.RestAssured.given
import  io.restassured.response.ValidatableResponse
import  org.evomaster.client.java.controller.api.EMTestUtils.*
import  org.evomaster.client.java.controller.SutHandler
import  org.evomaster.client.java.controller.db.dsl.SqlDsl.sql
import  org.hamcrest.Matchers.*
import  io.restassured.config.JsonConfig
import  io.restassured.path.json.config.JsonPathConfig
import  io.restassured.config.RedirectConfig.redirectConfig
import  org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*


/**
 * This file was automatically generated by EvoMaster on 2020-09-19T15:08:20.210316+02:00\[Europe/Oslo\]
 * 
 * The generated test suite contains 18 tests
 * 
 * Covered targets: 194
 * 
 * Used time: 0h 10m 0s
 * 
 * Needed budget for current results: 32%
 * 
 * 
 */
internal class EvoMasterTest {

    
    companion object {
        private val controller : SutHandler = org.tsdes.advanced.rest.evomaster.EvoMasterDriver()
        private lateinit var baseUrlOfSut: String
        
        
        @BeforeAll
        @JvmStatic
        fun initClass() {
            controller.setupForGeneratedTest()
            baseUrlOfSut = controller.startSut()
            assertNotNull(baseUrlOfSut)
            RestAssured.enableLoggingOfRequestAndResponseIfValidationFails()
            RestAssured.useRelaxedHTTPSValidation()
            RestAssured.urlEncodingEnabled = false
            RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false))
        }
        
        
        @AfterAll
        @JvmStatic
        fun tearDown() {
            controller.stopSut()
        }
    }
    
    
    @BeforeEach
    fun initTest() {
        controller.resetStateOfSUT()
    }
    
    
    
    
    @Test
    fun test_0_with500()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"\", " + 
                    " \"title\": \"liSHrMHhlWWiWc9\", " + 
                    " \"year\": 234.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(500) // org/tsdes/advanced/rest/guiv1/BookRest_48_create
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
//                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/api/books"))
    }
    
    
    @Test
    fun test_1_with500()  {
        val insertions = sql().insertInto("BOOK", 32L)
                .d("ID", "-2048739857")
                .d("YEAR", "426")
            .and().insertInto("BOOK", 31L)
                .d("ID", "-2113299049")
                .d("YEAR", "599")
            .and().insertInto("BOOK", 30L)
                .d("ID", "2004721079")
                .d("YEAR", "99")
            .and().insertInto("BOOK", 29L)
                .d("ID", "-1459492369")
                .d("YEAR", "291")
            .dtos()
        controller.execInsertionsIntoDatabase(insertions)
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"\", " + 
                    " \"id\": \"rnvM\" " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"year\": 623.0 " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/evomaster_86_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books/YDmgMPHKH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books")
                .then()
                .statusCode(500) // org/tsdes/advanced/rest/guiv1/BookRest_29_getAll
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
//                .body("'message'", containsString("Exception occurred inside setter of org.tsdes.advanced.rest.guiv1.db.Book.author; nested exception is org.hibernate.PropertyAccessException: Exception occurred inside setter of org.tsdes.advanced.rest.guiv1.db.Book.author"))
                .body("'path'", containsString("/api/books"))
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/1801616087")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"dSBn3XC5Zmp\", " + 
                    " \"id\": \"Yc60huuYgnwtFug\", " + 
                    " \"title\": \"GuwfRl29\", " + 
                    " \"year\": 353.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"id\": \"nbYiL9\", " + 
                    " \"year\": 147.0 " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/0")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/h")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
    }
    
    
    @Test
    fun test_2_with500()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"title\": \"G\", " + 
                    " \"year\": 332.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(500) // org/tsdes/advanced/rest/guiv1/BookRest_47_create
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
//                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/books"))
    }
    
    
    @Test
    fun test_3_with500()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"title\": \"jlnAdJS07\", " + 
                    " \"year\": 996.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(500) // org/tsdes/advanced/rest/guiv1/BookRest_47_create
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
//                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/books"))
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"1P\", " + 
                    " \"title\": \"HAYgX2kKMXDC9\", " + 
                    " \"year\": 873.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'title'", hasItem(containsString("HAYgX2kKMXDC9")))
                .body("'author'", hasItem(containsString("1P")))
                .body("'year'", hasItem(numberMatches(873.0)))
                .body("'id'", hasItem(containsString("1")))
    }
    
    
    @Test
    fun test_4()  {
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books/R1dEtap8_t_1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"title\": \"nFjzdMjGGELjAsbE\" " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"Y9\", " + 
                    " \"title\": \"rbrXWiFQ_\" " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/XspVfBjkQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0))
                .body("isEmpty()", `is`(true))
    }
    
    
    @Test
    fun test_5()  {
        
        var location_books : String? = ""
        
        val res_0: ValidatableResponse = given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"xmLZH\", " + 
                    " \"title\": \"UkD\", " + 
                    " \"year\": 670.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
        location_books = res_0.extract().header("location")
        assertTrue(isValidURIorEmpty(location_books));
        
        given().accept("*/*")
                .get(resolveLocation(location_books, baseUrlOfSut + "/api/books/_9d8"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'title'", containsString("UkD"))
                .body("'author'", containsString("xmLZH"))
                .body("'year'", numberMatches(670.0))
    }
    
    
    @Test
    fun test_6()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"\", " + 
                    " \"id\": \"rnvM\" " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"year\": 623.0 " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/o")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0))
                .body("isEmpty()", `is`(true))
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books/YDmgMPHKH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0))
                .body("isEmpty()", `is`(true))
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"ID3D2iIr\", " + 
                    " \"id\": \"GqYnd48eCEMTNR\", " + 
                    " \"title\": \"MhKFTQTcWxisJ\" " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/i")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"dSBn3XC5Zmp\", " + 
                    " \"id\": \"Yc60huuYgnwtFug\", " + 
                    " \"title\": \"GuwfRl29\", " + 
                    " \"year\": 353.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"id\": \"nbYiL9\", " + 
                    " \"year\": 147.0 " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/0")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/h")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
    }
    
    
    @Test
    fun test_7()  {
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0))
                .body("isEmpty()", `is`(true))
    }
    
    
    @Test
    fun test_8()  {
        
        var location_books : String? = ""
        
        val res_0: ValidatableResponse = given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"Y9rJKCkoCwS2ASuU\", " + 
                    " \"title\": \"Uzc6Nd\", " + 
                    " \"year\": 383.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
        location_books = res_0.extract().header("location")
        assertTrue(isValidURIorEmpty(location_books));
        
        given().accept("*/*")
                .delete(resolveLocation(location_books, baseUrlOfSut + "/api/books/VH6M7VFpXGRGGjg"))
                .then()
                .statusCode(204)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
    }
    
    
    @Test
    fun test_9()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"8v0pbsQ57gRH7XE\", " + 
                    " \"title\": \"UJHsR\", " + 
                    " \"year\": 632.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
    }
    
    
    @Test
    fun test_10()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"PSyzPHx_u\", " + 
                    " \"id\": \"\", " + 
                    " \"year\": 464.0 " + 
                    " } ")
                .post("$baseUrlOfSut/api/books")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
    }
    
    
    @Test
    fun test_11()  {
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books/kkffBHdCg9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
    }
    
    
    @Test
    fun test_12()  {
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/2zQ6JfOrWQPy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
    }
    
    
    @Test
    fun test_13()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"id\": \"t4Zwc4u\" " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/saVu3Qs1KK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("")
    }
    
    
    @Test
    fun test_14()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"id\": \"l4Zwc4u\", " + 
                    " \"title\": \"Qp7KeH4yW5\" " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/saV%C2%853Qk0KK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
//                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/books/saV%C2%853Qk0KK"))
    }
    
    
    @Test
    fun test_15()  {
        
        given().accept("*/*")
                .get("$baseUrlOfSut/api/books/-965757447")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
    }
    
    
    @Test
    fun test_16()  {
        
        given().accept("*/*")
                .delete("$baseUrlOfSut/api/books/1134393111")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
    }
    
    
    @Test
    fun test_17()  {
        
        given().accept("*/*")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"author\": \"nJWdsTRDW\", " + 
                    " \"id\": \"evomaster_219_input\" " + 
                    " } ")
                .put("$baseUrlOfSut/api/books/19946341")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString())
    }


}
