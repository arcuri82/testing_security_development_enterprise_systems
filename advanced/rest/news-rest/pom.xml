<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>news-rest</artifactId>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.tsdes.advanced.rest</groupId>
        <artifactId>rest</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <build>
        <plugins>
            <plugin>
                <!--
                    This will create a uber/fat jar under "target" folder.
                    The entire application (including the embedded server Tomcat)
                    can be started from command line with:

                    java -jar target/newsRest.jar

                    Note: this is very different from building a WAR file that
                    has to be deployed on a running container.
                    If you really want, it is possible to still build a WAR file
                    for a Spring application, and then deploy it on a running
                    Tomcat, or any other server supporting the "servlet" specs
                    of JEE (no need for full JEE spec implementations though).

                    Once the program is started, the API will be accessible at:

                    http://localhost:8080/newsrest/api

                    you can see which endpoints it has from the logs of the application.
                    However, you can also access the Swagger schema at:

                    http://localhost:8080/newsrest/api/v3/api-docs

                    furthermore, a human-readable UI web page with the documentation
                    is accessible at:

                    http://localhost:8080/newsrest/api/swagger-ui/index.html

                    This can also be used to manually test the API directly from
                    the browser
                -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <finalName>newsRest</finalName>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <dependencies>

        <dependency>
            <groupId>org.tsdes.advanced</groupId>
            <artifactId>example-news</artifactId>
        </dependency>
        <dependency>
            <groupId>org.tsdes.misc</groupId>
            <artifactId>test-utils</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <!-- test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>